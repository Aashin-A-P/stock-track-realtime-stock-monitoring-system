services:
  postgres:
    image: postgres:16.2
    container_name: postgres-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER:-postgres} -d $${POSTGRES_DB:-${POSTGRES_DB}}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend-app
    environment:
      SERVER_URL: ${SERVER_URL:-http://smsit.mit}
      PORT: 3000
      SECRET_KEY: ${SECRET_KEY}
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      NODE_ENV: production
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  nginx:
    build:
      context: .
      dockerfile: ./nginx/Dockerfile
    container_name: nginx-proxy
    ports:
      - "8008:80"
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
        test: ["CMD", "nginx", "-t"]
        interval: 30s
        timeout: 10s
        retries: 3
    deploy:
      resources:
        limits:
          memory: 256M 
        reservations:
          memory: 128M

volumes:
  postgres-data: