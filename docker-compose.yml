version: '3.8'

services:
  postgres:
    image: postgres:16.2 # Or latest stable 16.x
    container_name: postgres-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"] # Note $$ for shell vars
      interval: 10s
      timeout: 5s
      retries: 5
    # ports: # Do NOT expose 5432 to the host unless absolutely necessary
      # - "5432:5432"
    deploy: # Optional: Resource limits
      resources:
        limits:
          memory: 1G # Adjust as needed
        reservations:
          memory: 512M

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      SERVER_URL: ${SERVER_URL}
      PORT: 3000
      SECRET_KEY: ${SECRET_KEY}
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "127.0.0.1:3000:3000" # Expose only to localhost if using a reverse proxy
                               # Or "3000:3000" if accessed directly (less recommended)
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"] # Create a /health endpoint in your backend
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s # Give backend more time to start after DB is healthy
    deploy: # Optional: Resource limits
      resources:
        limits:
          cpus: '1.0'
          memory: 1G # Adjust as needed
        reservations:
          cpus: '0.5'
          memory: 512M

  frontend: # Renamed from frontend-nginx for simplicity, assuming Nginx serves it
    image: nginx:1.25-alpine # Pinned version
    container_name: frontend-web
    volumes:
      - ./frontend/dist:/usr/share/nginx/html:ro # Mount built static assets
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro # Custom Nginx config
    ports:
      - "80:80"   # For HTTP
      # - "443:443" # If Nginx handles SSL (requires SSL certs and config)
    depends_on:
      - backend # So Nginx knows backend exists for proxy_pass, if Nginx proxies API calls
    restart: unless-stopped
    deploy: # Optional: Resource limits
      resources:
        limits:
          memory: 256M # Adjust as needed
        reservations:
          memory: 128M

volumes:
  postgres-data:
    # driver: local # Default, but good to be explicit